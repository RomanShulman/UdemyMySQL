-- TV Joins Challenge 1 --
    
SELECT title, rating FROM series
    JOIN reviews
    ON series.id = reviews.series_id;


-- TV Joins Challenge 2 AVG rating--
    
SELECT 
    title, 
    AVG(rating) AS avg_rating
FROM series
JOIN reviews
    ON series.id = reviews.series_id
GROUP BY series.id
ORDER BY avg_rating ASC;

-- TV Joins Challenge 3 reviewer's rating--

SELECT 
    first_name,
    last_name,
    rating
FROM reviewers
JOIN reviews
    ON reviewers.id = reviews.reviewer_id;
    
-- TV Joins Challenge 4 unreviewed series--

SELECT 
    title AS unreviewed_series
FROM series
LEFT JOIN reviews
    ON series.id = reviews.series_id
WHERE rating IS NULL;

-- TV Joins Challenge 5 genre's ratings--

SELECT 
    genre, 
    AVG(rating) AS avg_rating
FROM series
INNER JOIN reviews
    ON series.id = reviews.series_id
GROUP BY series.genre;

-- TV Joins Challenge 6 reviewers ratings--

SELECT 
    first_name,
    last_name,
    COUNT(reviews.rating) AS COUNT,
    IFNULL(MIN(reviews.rating), 0) AS MIN,
    IFNULL(MAX(reviews.rating), 0) AS MAX,
    IFNULL(AVG(reviews.rating), 0) AS AVG,
    CASE 
        WHEN reviews.rating IS NULL OR reviews.rating = 0 THEN 'INACTIVE'
        ELSE 'ACTIVE'
    END AS STATUS
FROM reviewers
LEFT JOIN reviews
    ON reviewers.id = reviews.reviewer_id
GROUP BY reviewers.id;

-- TV Joins Challenge 7 final challenge --

SELECT 
    series.title,
    reviews.rating,
    CONCAT(reviewers.first_name, ' ', reviewers.last_name) AS reviewer 
FROM
    reviews
INNER JOIN series
    ON series.id = reviews.series_id
INNER JOIN reviewers
    ON reviewers.id = reviews.reviewer_id
ORDER BY series.title;


